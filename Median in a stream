#include<bits/stdc++.h>

class Heap{
	priority_queue<int>maxHeap;
	priority_queue<int, vector<int>, greater<int>>minHeap;

	public:
		void insert(int data)
		{
			if(maxHeap.size()==0 || maxHeap.top()>data){
				maxHeap.push(data);
			}
			else{
				minHeap.push(data);
			}

			if(maxHeap.size()>minHeap.size()+1){
				minHeap.push(maxHeap.top());
				maxHeap.pop();
			}
			else if(maxHeap.size()<minHeap.size()){
				maxHeap.push(minHeap.top());
				minHeap.pop();
			}
		}

		int median()
		{
			if(maxHeap.size()==minHeap.size()){
				return (maxHeap.top()+minHeap.top())/2;
			}
			return maxHeap.top();
		}
};

vector<int> findMedian(vector<int> &arr, int n){
	Heap heap;
	vector<int>ans;
	for(int i=0;i<n;i++){
		heap.insert(arr[i]);
		int med=heap.median();
		ans.push_back(med);
	}
	return ans;
}
