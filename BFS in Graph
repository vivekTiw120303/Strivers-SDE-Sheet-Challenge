#include <bits/stdc++.h> 

void bfs(int i, vector<int>adj[], vector<int>&vis, vector<int>&ans)
{
    queue<int>q;
    q.push(i);
    vis[i]=1;
    while(!q.empty())
    {
        int node=q.front();
        q.pop();
        ans.push_back(node);

        for(auto it:adj[node])
        {
            if(!vis[it])
            {
                vis[it]=1;
                q.push(it);
            }
        }
    }
}

vector<int> BFS(int V, vector<pair<int, int>> edges)
{
    int n=edges.size();
    vector<int>adj[V+1];
    for(int i=0;i<n;i++)
    {
        int u=edges[i].first;
        int v=edges[i].second;
        adj[u].push_back(v);
        adj[v].push_back(u);        
    }

    for(int i=0;i<V;i++)
    {
        sort(adj[i].begin(),adj[i].end());
    }

    vector<int>ans;
    vector<int>vis(V,0);
    for(int i=0;i<V;i++)
    {
        if(!vis[i])
        {
            bfs(i,adj,vis,ans);
        }
    }
    return ans;
}
