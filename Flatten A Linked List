#include<bits/stdc++.h>

/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */

 Node* merge(Node* node1, Node* node2)
 {
	 if(!node1 && !node2) return NULL;
	 if(!node1) return node2;
	 if(!node2) return node1;

	 Node* head=NULL;
	 Node* temp=NULL;
	 if(node1->data<=node2->data){
		 head=node1;
		 node1=node1->child;
		 temp=head;
	 }
	 else{
		 head=node2;
		 node2=node2->child;
		 temp=head;
	 }

	 while(node1 && node2){
		if(node1->data<=node2->data){
			temp->child=node1;
			node1=node1->child;
			temp=temp->child;
		}
		else{
			temp->child=node2;
			node2=node2->child;
			temp=temp->child;
		}
	}
	
	if(node1) temp->child=node1;
	if(node2) temp->child=node2;
	return head;
 }

Node* flattenLinkedList(Node* head) 
{
	if(!head || head->next==NULL) return head;

	Node* head1=head;
	Node* head2=head->next;
	while(head2){
		head1=merge(head1,head2);
		head2=head2->next;
	}

	Node* node=head1;
	while(node){
		node->next=NULL;
		node=node->child;
	}
	return head1;
}
