#include<bits/stdc++.h>

int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  vector<int>adj[n+2], indegree(n+1,0);
  
  for(int i=0;i<edges.size();i++)
  {
      int u=edges[i].first;
      int v=edges[i].second;
      adj[u].push_back(v);
      indegree[v]++;
  }

  queue<int>q;
  for(int i=1;i<=n;i++)
  {
    if(indegree[i]==0)
    {
      q.push(i);
    }
  }

  vector<int>topo;
  while(!q.empty())
  {
      int node=q.front();
      q.pop();
      topo.push_back(node);

      for(auto it:adj[node])
      {
          indegree[it]--;
          if(indegree[it]==0)
          {
              q.push(it);
          }
      }
  }

  return (topo.size()==n) ? 0 : 1;

}
