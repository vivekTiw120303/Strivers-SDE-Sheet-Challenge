#include<bits/stdc++.h>

int largestRectangle(vector < int > & heights) {
  int n=heights.size();
  stack<int>st;
  vector<int>leftMin(n,0), rightMin(n,0);
  for(int i=0;i<n;i++)
  {
      while(!st.empty() && heights[st.top()]>=heights[i] )
      {
          st.pop();
      }
      
      if(st.empty()) leftMin[i]=0;
      else leftMin[i]=st.top()+1;

      st.push(i);
  }

  while(!st.empty()) st.pop();

  for(int i=n-1;i>=0;i--)
  {
      while(!st.empty() && heights[st.top()]>=heights[i] )
      {
          st.pop();
      }
      
      if(st.empty()) rightMin[i]=n-1;
      else rightMin[i]=st.top()-1;

      st.push(i);
  }

  int ans=0;
  for(int i=0;i<n;i++)
  {
    ans=max(ans, heights[i]*(rightMin[i]-leftMin[i]+1));
  }
  return ans;
}



// Optimal Solution
#include<bits/stdc++.h>

int largestRectangle(vector < int > & heights) {
  int n=heights.size();
  int ans=0;
  stack<int>st;
  st.push(-1);
  for(int i=0;i<=n;i++)
  {
      while(!st.empty() && (i==n || heights[i]<=heights[st.top()]))
      {
          int height=heights[st.top()];
          st.pop();
          int width;
          if(st.empty()) width=i;
          else width=i-st.top()-1;

          ans=max(ans, height*width);
      }
      st.push(i);
  }
  return ans;
}
