#include <bits/stdc++.h> 

bool isSafe(int col, int node, vector<int>adj[], vector<int>&color)
{
    for(auto it:adj[node])
    {
        if(color[it]==col)
        {
            return false;
        }
    }
    return true;
}

bool dfs(int node, vector<int>adj[], vector<int>&color, int m, int n)
{
    if(node==n) return true;

    for(int i=1;i<=m;i++)
    {
        if(isSafe(i,node,adj,color))
        {
            color[node]=i;
            if(dfs(node+1,adj,color,m,n)) return true;
            color[node]=0;
        }
    }
    return false;
}

string graphColoring(vector<vector<int>> &mat, int m) {
    int n=mat.size();
    vector<int>adj[n+1];
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            if(mat[i][j]==1)
            {
                adj[i].push_back(j);
            }
        }
    }

    vector<int>color(n,0);
    return dfs(0,adj,color,m,n) ? "YES" : "NO";
}
