#include<bits/stdc++.h>

bool isCycle(int i, vector<int>&vis, vector<int>adj[])
{
    vis[i]=1;
    queue<pair<int,int>>q;
    q.push({i,-1});

    while(!q.empty())
    {
        int node=q.front().first;
        int parent=q.front().second;
        q.pop();

        vis[node]=1;
        for(auto it:adj[node])
        {
            if(!vis[it])
            {
                q.push({it,node});
            }
            else if(it!=parent)
            {
                return true;
            }
        }
    }
    return false;
}

string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    vector<int>adj[n+2];
    for(int i=0;i<m;i++)
    {
        int u=edges[i][0];
        int v=edges[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    vector<int>vis(n+1,0);
    for(int i=1;i<=n;i++)
    {
        if(!vis[i])
        {
            if(isCycle(i,vis,adj))
            {
                return "Yes";
            }
        }
    }
    return "No";
}
