#include<bits/stdc++.h>

class Node{
    public:
        Node* links[26];
        bool flag=false;

        bool containsChar(char ch){
            return links[ch-'a']!=NULL;
        }

        void put(char ch, Node* node){
            links[ch-'a']=node;
        }

        Node* get(char ch){
            return links[ch-'a'];
        }

        void setEnd(){
            flag=true;
        }

        bool isEnd(){
            return flag;
        }
};

class Trie{
    public:
        Node* root;
        Trie(){
            root=new Node();
        }

        void insert(string &word)
        {
            Node* node=root;
            for(int i=0;i<word.size();i++)
            {
                if(!node->containsChar(word[i])){
                    node->put(word[i],new Node());
                }
                node=node->get(word[i]);
            }
            node->setEnd();
        }

        string LCP()
        {
            Node* node=root;
            string prefix;
            while(node && isSingleChild(node) && !node->isEnd())
            {
                for(char ch='a';ch<='z';ch++){
                    if(node->containsChar(ch)){
                        prefix+=ch;
                        node=node->get(ch);
                        break;
                    }
                }
            }
            return prefix;
        }
    
    private:
        bool isSingleChild(Node* node)
        {
            int cnt=0;
            for(char ch='a';ch<='z';ch++)
            {
                if(node->containsChar(ch))
                {
                    cnt++;
                    if(cnt>1) return false;
                }
            }
            return true;
        }
};

string longestCommonPrefix(vector<string> &arr, int n)
{
    string prefix=arr[0];
    for(int i=1;i<n;i++)
    {
        int j=0;
        while(j<prefix.length() && j<arr[i].length() && prefix[j]==arr[i][j]){
            j++;
        }

        prefix=prefix.substr(0,j);
        if(prefix=="") break;
    }
    return prefix;
}
