#include<bits/stdc++.h>

class Heap{
    priority_queue<int, vector<int>, greater<int> >minHeap;
    priority_queue<int> maxHeap;
    public:
        void insert(int num)
        {
            if(maxHeap.size()==0 || maxHeap.top()>num){
                maxHeap.push(num);
            }
            else{
                minHeap.push(num);
            }

            if(maxHeap.size()>1+minHeap.size()){
                minHeap.push(maxHeap.top());
                maxHeap.pop();
            }
            else if(minHeap.size()>maxHeap.size()){
                maxHeap.push(minHeap.top());
                minHeap.pop();
            }
        }

        int median(){
            if(maxHeap.size()==minHeap.size()){
                return (maxHeap.top()+minHeap.top())/2;
            }
            return maxHeap.top();
        }
};

void findMedian(int *arr, int n)
{
    Heap heap;
    for(int i=0;i<n;i++)
    {
        heap.insert(arr[i]);
        cout<<heap.median()<<" ";
    }
}
