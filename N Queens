#include<bits/stdc++.h>

bool isSafe(int row, int col, int n, vector<vector<int>>&board)
{
    for(int i=0;i<row;i++)
    {
        if(board[i][col]==1) return false;
    }

    int r=row, c=col;
    while(r>=0 && c>=0)
    {
        if(board[r][c]==1) return false;
        r--;
        c--;
    }

    r=row, c=col;
    while (r >= 0 && c < n) {
      if (board[r][c] == 1)
        return false;
      r--;
      c++;
    }
    return true;
}

void solve(vector<vector<int>>&board, int row, int col, int n, vector<vector<int>>&ans)
{
    if(row==n){
        vector<int>temp;
        for(auto &it:board) {
            temp.insert(temp.end(),it.begin(),it.end());
        }
        ans.push_back(temp);
        return;
    }

    for(int j=col;j<n;j++)
    {
        if(isSafe(row,j,n,board))
        {
            board[row][j]=1;

            solve(board,row+1,0,n,ans);

            board[row][j]=0;
        }
    }
}

vector<vector<int>> solveNQueens(int n) {
    if(n==1) return {{1}};
    if(n<=3) return {{}};

    vector<vector<int>>board(n, vector<int>(n,0));
    vector<vector<int>>ans;

    solve(board,0,0,n,ans);
       
    return ans;
}
