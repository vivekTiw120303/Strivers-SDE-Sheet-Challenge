/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */

Node *rotate(Node *head, int k) {
     Node* node=head;
     int n=0;
     while(node!=NULL)
     {
          n++;
          node=node->next;
     }
     k%=n;
     if(k==0) return head;

     Node* left=new Node();
     Node* right=new Node();
     Node* leftHead=left;
     Node* rightHead=right;
     int cnt=1;
     while(head!=NULL)
     {
          Node* temp=new Node(head->data);
          if(cnt<=n-k)
          {
               // if(!right) right= new Node(head->data);
               right->next=temp;
               right=right->next;
          }
          else
          {
               // if(!left) left= new Node(head->data);
               left->next=temp;
               left=left->next;
          }
          cnt++;
          head=head->next;
     }
     right->next=NULL;
     left->next=rightHead->next;
     return leftHead->next;
}
