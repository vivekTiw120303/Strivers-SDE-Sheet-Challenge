#include <bits/stdc++.h> 

class Node{
    public:
        Node* links[26];
        int cntEndWith=0, cntPrefix=0;

        void put(char ch, Node* node){
            links[ch-'a']=node;
        }

        Node* get(char ch){
            return links[ch-'a'];
        }

        bool containsChar(char ch){
            return links[ch-'a']!=NULL;
        }

        void reduceWord(){
            cntEndWith--;
        }

        void reducePrefix(){
            cntPrefix--;
        }

        void increaseWord(){
            cntEndWith++;
        }

        void increasePrefix(){
            cntPrefix++;
        }

        int cntWords(){
            return cntEndWith;
        }

        int cntPrefixIn(){
            return cntPrefix;
        }
};

class Trie{
    public:
    Node* root;

    Trie(){
        root=new Node();
    }

    void insert(string &word){
        Node* node=root;
        for(int i=0;i<word.size();i++)
        {
            if(!node->containsChar(word[i])){
                node->put(word[i],new Node());
            }
            node=node->get(word[i]);
            node->increasePrefix();
        }
        node->increaseWord();
    }

    int countWordsEqualTo(string &word){
        Node* node=root;
        for(int i=0;i<word.size();i++)
        {
            if(!node->containsChar(word[i]))
            {
                return 0;
            }
            node=node->get(word[i]);
        }
        return node->cntWords();
    }

    int countWordsStartingWith(string &word){
        Node* node=root;
        for(int i=0;i<word.size();i++)
        {
            if(!node->containsChar(word[i])){
                return 0;
            }
            node=node->get(word[i]);
        }
        return node->cntPrefixIn();
    }

    void erase(string &word){
        Node* node=root;
        for(int i=0;i<word.size();i++)
        {
            if(!node->containsChar(word[i])){
                return;
            }
            node=node->get(word[i]);
            node->reducePrefix();
        }
        node->reduceWord();
    }
};
