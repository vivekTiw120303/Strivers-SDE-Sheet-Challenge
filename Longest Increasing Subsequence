#include<bits/stdc++.h>

int helper(int i, int n, int prev, int arr[], vector<vector<int>>&dp)
{
    if(i==n)
    {
        return 0;
    }
    if(dp[i][prev+1]!=-1)
    {
        return dp[i][prev+1] ;
    }

    int take=0;
    if(prev==-1 || arr[i]>arr[prev])
    {
        take=1+helper(i+1,n,i,arr,dp);
    }
    int notTake=helper(i+1,n,prev,arr,dp);

    return dp[i][prev+1] = max(take,notTake);
}

int longestIncreasingSubsequence(int arr[], int n)
{
    if(n==0) return 0;
    if(n==1) return 1;

    vector<int>ans;
    ans.push_back(arr[0]);
    
    for(int i=1;i<n;i++)
    {
        if(arr[i]>ans.back())
        {
            ans.push_back(arr[i]);
        }
        else
        {
            int ind=lower_bound(ans.begin(),ans.end(),arr[i])-ans.begin();
            ans[ind]=arr[i];
        }
    }
    return ans.size();
}
