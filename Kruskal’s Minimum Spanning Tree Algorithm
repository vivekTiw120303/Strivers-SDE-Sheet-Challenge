#include <bits/stdc++.h> 

class DisjointSet{
	public:
	vector<int>parent,size;

	DisjointSet(int n)
	{
		size.resize(n+1,1);
		parent.resize(n+1);
		for(int i=0;i<=n;i++)
		{
			parent[i]=i;
		}
	}

	int findPar(int node)
	{
		if(node==parent[node]) return node;

		return parent[node]=findPar(parent[node]);
	}

	void UnionBySize(int u, int v)
	{
		int up_u=findPar(u);
		int up_v=findPar(v);

		if(up_u==up_v) return;

		if(size[up_u]<size[up_v]){
			parent[up_u]=up_v;
			size[up_v]+=size[up_u];
		}
		else{
			parent[up_v]=up_u;
			size[up_u]+=size[up_v];
		}
	}
};

int kruskalMST(int n, int m, vector<vector<int>> &graph) {
	vector<vector<int>>adj;
	for(auto it:graph){
		int u=it[0], v=it[1], wt=it[2];
		adj.push_back({wt,u,v});
	}

	sort(adj.begin(),adj.end());
	DisjointSet ds(n+1);
	int mst_wt=0;
	for(auto it:adj)
	{
		int wt=it[0], u=it[1], v=it[2];
		if(ds.findPar(u)!=ds.findPar(v)){
			mst_wt+=wt;
			ds.UnionBySize(u,v);
		}
	}
	return mst_wt;
}
